#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('timder:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * =============
 *   Socket.io
 * =============
 */

var io = require('socket.io')(server);

io.on('connection', function(socket) {
  console.log('user connected');
  socket.on('disconnect', function() {
    console.log('user disconnected');
  });

  socket.on('addAdmin', function(newAdmin) {
    console.log(newAdmin);
    Admin.create(newAdmin,function(err,newAdmin){

      console.log(newAdmin);
      console.log('admin saved!! xD');
    });
  });

  //student
  socket.on('addStudent',function(newStudent){
    console.log(newStudent);
    Student.create(newStudent,function(err,newStudent){

      console.log(newStudent);
      console.log("new student created");
    });
  });

  socket.on("getStudents", function(){

    Student.find().exec(function(err,students){

      socket.emit('listStudents',students);
    });
  });


  socket.on('deleteStudent',function(data){
   


   Student.remove({_id: data}, function(err, b) {
      if (err) { console.log(err); }
      console.log("Student with id" +data+ " deleted");
      io.emit('studentDeleted', b);
    });

  });

  //meetings

  socket.on('addMeet',function(newMeet){
    console.log(newMeet);
    Meet.create(newMeet,function(err,newMeet){

      console.log(newMeet);
      console.log("new date created");
    });
  });

  socket.on("getMeets", function(){

   Meet.find().exec(function(err,meets){

      socket.emit('listMeets',meets);
    });
  });

});


io.on('connect', function(socket) {
  console.log('connected');
});

/**
 * ======
 *   DB
 * ======
 */

// dependencies
var mongoose = require('mongoose');
var restful = require('node-restful');

// connect
mongoose.connect('mongodb://localhost/timder');

// models
var Admin = app.admin = restful.model("Admin",mongoose.Schema({

  email:{

    type:String,
    required:true

  },

  password:{

    type:String,
    required:true

  }


}, {collection:"admins"})).methods(['get','post','put','delete']);
Admin.register(app,'/admins');

//student model
var Student = app.student = restful.model("Student",mongoose.Schema({

  email:{

    type:String,
    required:true

  },

  firstName:{

    type:String,
    required:true
  },

  lastName:{

    type:String,
    required:true
  },

  password:{

    type:String,
    required:true

  }



}, {collection:"students"})).methods(['get','post','put','delete']);
Student.register(app,'/students');

//date model

var Meet = app.meet = restful.model("Meet",mongoose.Schema({

  companyName:{

    type:String,
    required:true,
  },

  studentOne:{

    type:String
  },

  studentTwo:{

    type:String,
  },

  studentThree:{

    type:String,
  }

}, {collection:"meets"})).methods(['get','post','put','delete']);
Meet.register(app,'/meets');


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}