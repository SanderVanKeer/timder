#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('timder:server');
var http = require('http');
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;

var Company = require('../models/company.js');
var Student = require('../models/student.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * =============
 *   Socket.io
 * =============
 */

var io = require('socket.io')(server);

io.on('connection', function(socket) {
  console.log('user connected');
  socket.on('disconnect', function() {
    console.log('user disconnected');
  });

  // add company
  socket.on('checkCompany', function(newCompany) {
    Company.findOne(newCompany, function(err, existingCompany) {
      if(existingCompany) {
        console.log('company "' + existingCompany.name + '" already exists.');
        socket.emit('companyExists', existingCompany);
      } else {
        console.log('company "' + newCompany.name + '" is available.');
        io.emit('companyAvailable', newCompany);
      }
    });
  });

  socket.on('addCompany', function(newCompany) {
    Company.create(newCompany, function(err, newCompany) {
      console.log('company "' + newCompany.name + '" saved.');
      console.log(newCompany);
    });
  });

  socket.on('getCompanyInfo', function() {
    Company.find({_id: '554fcdb98f56a278af9118c5'}).exec(function(company) {
      socket.emit('showCompanyInfo', company);
    });
  });

  socket.on('addStudent', function(student) {
    Student.create(student, function(err, student) {
      console.log(student + " created!");
    });
  });
});

io.on('connect', function(socket) {

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function() {
  console.log("Started on PORT 3000");
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}