#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app           = require('../app');
var debug         = require('debug')('timder:server');
var http          = require('http');
var passport      = require('passport');
var LocalStrategy = require('passport-local').Strategy;
var bCrypt        = require('bcrypt-nodejs');

var Company = require('../models/company.js');
var Student = require('../models/student.js');
var Admin   = require('../models/admin.js');
var Meet    = require('../models/meet.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * =============
 *   Socket.io
 * =============
 */

var io = require('socket.io')(server);

io.on('connection', function(socket) {
  console.log('user connected');
  socket.on('disconnect', function() {
    console.log('user disconnected');
  });

  socket.on('checkCompany', function(newCompany) {
    Company.findOne(newCompany, function(err, existingCompany) {
      if(existingCompany) {
        console.log('company "' + existingCompany.name + '" already exists.');
        socket.emit('companyExists', existingCompany);
      } else {
        console.log('company "' + newCompany.name + '" is available.');
        io.emit('companyAvailable', newCompany);
      }
    });
  });

  socket.on('addCompany', function(newCompany) {
    Company.create(newCompany, function(err, newCompany) {
      console.log('company "' + newCompany.name + '" saved.');
      console.log(newCompany);
    });
  });

  socket.on('addAdmin', function(newAdmin) {
    console.log(newAdmin);
    Admin.create(newAdmin,function(err,newAdmin){
      console.log(newAdmin);
      console.log('admin saved!');
    });
  });

  socket.on("getStudents", function(){
    Student.find().exec(function(err,students) {
      socket.emit('listStudents',students);
    });
  });

  socket.on('deleteStudent',function(data){
   Student.remove({_id: data}, function(err, b) {
      if (err) { console.log(err); }
      console.log("Student with id" +data+ " deleted");
    });
  });

  socket.on("getMeets", function(){
    Meet.find().exec(function(err,meets){
      io.sockets.emit('listMeets', meets);
    });
  });

  socket.on('deleteMeet',function(data){
   Meet.remove({_id: data}, function(err, b) {
      if (err) { console.log(err); }
      console.log("Student with id" +data+ " deleted");
    });
  });

  socket.on('changeEmail', function(newEmail) {
    Student.findOneAndUpdate({_id: newEmail.id}, {email: newEmail.email}, function(err, student) {
      console.log('email updated'); console.log(student);
    });
  });

  socket.on('changePassword', function(newPassword) {
    // password eerst hashen
    var hash = bCrypt.hashSync(newPassword.password, bCrypt.genSaltSync(10), null)

    Student.findOneAndUpdate({_id: newPassword.id}, {password: hash}, function(err, student) {
      console.log('password updated'); console.log(student);
    });
  });

  socket.on('changeFirstName', function(newFirstName) {
    Student.findOneAndUpdate({_id: newFirstName.id}, {firstName: newFirstName.firstName}, function(err, student) {
      console.log('first name updated'); console.log(student);
    });
  });

  socket.on('changeLastName', function(newLastName) {
    Student.findOneAndUpdate({_id: newLastName.id}, {lastName: newLastName.lastName}, function(err, student) {
      console.log('last name updated'); console.log(student);
    });
  });


  socket.on('meet',function(meet){

      Meet.create(meet,function(err, newMeet){

        console.log(newMeet);

      });

  });

// socket.on('firstMeet', function(firstMeet) {
//     Meet.findOne({companyName: firstMeet.companyName}, function(err, meet) {
//       if(!meet)
//       {
//         Meet.create(firstMeet, function(err, newMeet) {
//           console.log(newMeet);
//         });
//       } else {
//         Meet.findOneAndUpdate({companyName: meet.companyName}, {student1: firstMeet.student}, function(err, updatedMeet1) {
//           console.log('meet updated: ' + updatedMeet1);
//         });
//       }
//     });
//   });
//   socket.on('secondMeet', function(secondMeet) {
//     Meet.findOne({companyName: secondMeet.companyName}, function(err, meet) {
//       if(!meet)
//       {
//         Meet.create(secondMeet, function(err, newMeet) {
//           console.log(newMeet);
//         });
//       } else {
//         Meet.findOneAndUpdate({companyName: meet.companyName}, {student2: secondMeet.student}, function(err, updatedMeet2) {
//           console.log('meet updated: ' + updatedMeet2);
//         });
//       }
//     });
//   });

//   socket.on('thirdMeet', function(thirdMeet) {
//     Meet.findOne({companyName: thirdMeet.companyName}, function(err, meet) {
//       if(!meet)
//       {
//         Meet.create(thirdMeet, function(err, newMeet) {
//           console.log(newMeet);
//         });
//       } else {
//         Meet.findOneAndUpdate({companyName: meet.companyName}, {student3: thirdMeet.student}, function(err, updatedMeet3) {
//           console.log('meet updated: ' + updatedMeet3);
//         });
//       }
//     });
//   });

});

io.on('connect', function(socket) {

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function() {
  console.log("The magic is happening on http://localhost:3000");
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}